<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code | Maxim Zaslavsky]]></title>
  <link href="http://blog.maximzaslavsky.com/categories/code/atom.xml" rel="self"/>
  <link href="http://blog.maximzaslavsky.com/"/>
  <updated>2013-08-16T16:01:16-07:00</updated>
  <id>http://blog.maximzaslavsky.com/</id>
  <author>
    <name><![CDATA[Maxim Zaslavsky]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using the source command in bash]]></title>
    <link href="http://blog.maximzaslavsky.com/using-the-source-command-in-bash"/>
    <updated>2012-05-27T00:51:00-07:00</updated>
    <id>http://blog.maximzaslavsky.com/using-the-source-command-in-bash</id>
    <content type="html"><![CDATA[<p>A handy command for bash scripts is <code>source</code>:</p>

<blockquote><p><a href="http://ss64.com/bash/period.html">When a script is run using `source' it runs within the existing shell, any variables created or modified by the script will remain available after the script completes.</a></p></blockquote>

<p>So if you want to execute code that affects your current shell, rather than having it run in its separate subshell, run <code>source ./mycode</code> or <code>. ./mycode</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Positioning issues with Colorbars in Matplotlib]]></title>
    <link href="http://blog.maximzaslavsky.com/fixing-positioning-issues-with-colorbars-in-matplotlib"/>
    <updated>2012-05-26T01:36:00-07:00</updated>
    <id>http://blog.maximzaslavsky.com/fixing-positioning-issues-with-colorbars-in-matplotlib</id>
    <content type="html"><![CDATA[<p>I ran into a problem with some Matplotlib code the other day: clearing a figure that previously held a Colorbar would still keep empty space in the location of the now-removed Colorbar.</p>

<p>In other words, after removing the Colorbar from a figure, the figure would not shift back to its full width. And adding a colorbar afterwards would decrease the width of the figure even further, so the problem would compound.</p>

<p>Thankfully, I happened across <a href="http://stackoverflow.com/a/5265614/130164">a Stack Overflow answer</a> that addresses this problem with the following code:
<code>
self.figure.delaxes(self.figure.axes[1])
self.figure.subplots_adjust(right=0.90)  #default right padding
</code></p>

<p>This solution is inherently hacky, but does its job well. If you execute that code after clearing a figure (<code>self.figure.clf()</code>), the figure will shift to the right, returning to its original width before the creation of the Colorbar.</p>

<p>Also, if you are plotting multiple graphs in the same figure, I recommend keeping global handles to the figure, to the current axes, to the current Colorbar (if it exists), and to other graph elements. With that design, updating the figure requires only modification of those handles and a call to <code>draw()</code>, and you can fix the Colorbar positioning problem by checking to see if its handle is defined before you plot a new graph and correspondingly executing the removal code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Local Git sharing with a virtual machine]]></title>
    <link href="http://blog.maximzaslavsky.com/local-git-sharing-with-a-virtual-machine"/>
    <updated>2012-05-24T21:35:00-07:00</updated>
    <id>http://blog.maximzaslavsky.com/local-git-sharing-with-a-virtual-machine</id>
    <content type="html"><![CDATA[<p>My recent projects have involved work between two OSes. I run Windows as my host OS and virtualize Ubuntu, and in order to share work efficiently between the two, I've been using a local bare Git repository in a shared folder.</p>

<p>It's quite simple to set up:</p>

<p>First, make sure that you have a shared folder that is available to both your host and your guest OS. I personally use VirtualBox's Guest Additions and its built-in Shared Folders functionality, so I mount my share using the following command, where "share" is the name of the shared folder I have defined in VirtualBox, and "~/host" is the path to which I am mounting:
<code>
sudo mount -t vboxsf share ~/host
</code></p>

<p>Now, initialize a bare Git repository in the shared folder:
<code>
cd "~/host"
mkdir myrepo
cd myrepo
git init --bare
</code></p>

<p>Almost done. Return to your original repository and add to its remotes:
<code>
git remote add local "~/host/myrepo"
git push local master
</code></p>

<p>Finally, clone that repository from your other OS:
<code>
git clone "C:\vmshared\myrepo"
</code></p>

<p>Now, you can <code>git push</code> and <code>git pull</code> between your repository on the host OS and your repository on the guest OS to synchronize changes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recovering from SugarSync merge failures over source control repositories]]></title>
    <link href="http://blog.maximzaslavsky.com/recovering-from-sugarsync-merge-failures-over-source-control-repositories"/>
    <updated>2012-02-12T01:11:00-08:00</updated>
    <id>http://blog.maximzaslavsky.com/recovering-from-sugarsync-merge-failures-over-source-control-repositories</id>
    <content type="html"><![CDATA[<h2>Intro to SugarSync (SS)</h2>

<p>Ever since I started using <strong><a href="http://sugarsync.com">SugarSync</a></strong>, I've loved the app. Until now, it's proven to be easy to use and abnormally straightforward.</p>

<p>However, this weekend, SugarSync Manager decided to start crashing upon each load, making it completely unusable. I ordinarilly would have attempted to find and fix the cause of these crashes, but since the app was due for an update anyway, as I had neglected to run SugarSync (and sync latest changes) for a while, I decided to reinstall the Manager completely.</p>

<h2>Problem</h2>

<p>That turned out to be a bad decision. For some reason, I wasn't able to explain to SugarSync that the original device that had synced to my account is the same as the current device, so it treats them as different entities with the same device name. Instead, I decided to try SugarSync's <em>merge</em> functionality - as the people at SS explain it, it looks for differences between the older (in this case) version synced and the newer (in this case) version available on the current device.</p>

<p>I did not expect this to be a problem, but SugarSync decided to start merging within the <code>.hg</code> and <code>.git</code> directories of my hg and git repositories. Thus, old dirstates and other key files were transformed to the version they had been at an earlier time.</p>

<h2>Solution</h2>

<p>My folder structure looked someting like this for "infected" files:</p>

<ul>
<li><code>_Handwriting (from Maxim-laptop).i</code> // this is the newest one</li>
<li><code>_Handwriting.i</code> // this is the older one, but takes the place of the latest one.</li>
</ul>


<p>After countless bouts with HG in order to fix this via the HG tools, I decided to instead <strong><a href="https://github.com/maximz/sugarsyncfilefix">write a simple program</a></strong> that renames files in order to enable this to work.</p>

<p>File changes:</p>

<ol>
<li><code>_Handwriting.i</code> --> <code>_Handwriting.i.old</code></li>
<li><code>_Handwriting (from Maximlaptop).i</code> --> <code>_Handwriting.i</code></li>
</ol>


<p>If you run into this problem and just want a binary, here is the <a href="https://github.com/maximz/sugarsyncfilefix/raw/master/SugarSyncFileFix/bin/Release/SugarSyncFileFix.exe">Windows, .NET 4 binary</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C#: handling cookies in a series of HttpWebRequest and HttpWebResponse sessions]]></title>
    <link href="http://blog.maximzaslavsky.com/csharp-cookies"/>
    <updated>2009-06-28T00:00:00-07:00</updated>
    <id>http://blog.maximzaslavsky.com/csharp-cookies</id>
    <content type="html"><![CDATA[<p><em>Note: This is a revamp of <a href="http://blog.maximzaslavsky.com/2009/06/c-handling-cookies-in-a-series-of-httpwebrequest-and-httpwebresponse-sessions/">a post</a> from my old blog.  It was originally published on June 28, 2009.</em></p>

<p>A while back, I was working on "wrapping" and extracting data from an online database UI. In order to retrieve data, a user would submit a series of HTML forms, view the resulting map, and then see a popup with a malformed-HTML table of all the points displayed on the map. My goal was to write some C# that would submit these painful forms in various desired combinations and retrieve and parse the points.</p>

<p>To add insult to injury, a Fiddler run revealed that whoever wrote the UI decided to not just maintain session state, but also <em>transfer raw data</em> between the different UI pages using cookies and HTTP referrers with querystrings ... naturally. :'(</p>

<p>Thankfully, C# makes this really easy to solve - you just create a cookie "jar" that carries over from HTTP session to another:</p>

<p><code>
var cookieJar = new CookieContainer(); // initialize cookieJar
var request=(HttpWebRequest) WebRequest.Create("http://google.com"); // create your HttpWebRequests
request.CookieContainer = cookieJar; // for each HttpWebRequest you make, add cookieJar
</code></p>

<p>Use the last line to apply <code>cookieJar</code> to each request and you're set!</p>
]]></content>
  </entry>
  
</feed>
